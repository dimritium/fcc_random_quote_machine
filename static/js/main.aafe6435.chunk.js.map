{"version":3,"sources":["serviceWorker.js","components/quote_box/QuoteBox.js","index.js"],"names":["Boolean","window","location","hostname","match","allQuotes","quotes","randomMC","require","QuoteBox","props","state","currQuote","color","refreshQuote","bind","this","setState","Math","ceil","random","length","getColor","quoteIcon","icon","faQuoteLeft","twitterIcon","faTwitterSquare","id","style","backgroundColor","className","key","class","href","onClick","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"29YAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gFCXAC,EAAYC,EAAOA,OACnBC,EAAWC,EAAQ,IAqDVC,E,kDAlDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,GACXC,MAAO,IAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANL,E,gEAUfC,KAAKF,iB,qCAILE,KAAKC,SAAU,CACXL,UAAWP,EAAUa,KAAKC,KAAKD,KAAKE,SAAWf,EAAUgB,QAAU,GACnER,MAAON,EAASe,e,+BAKpB,IAAMC,EAAY,kBAAC,IAAD,CAAiBC,KAAMC,MACnCC,EAAc,kBAAC,IAAD,CAAiBF,KAAMG,MAC3C,OACI,yBAAKC,GAAG,MAAMC,MAAO,CACjBC,gBAAiBd,KAAKL,MAAME,MAC5BA,MAAOG,KAAKL,MAAME,QAElB,yBAAKe,GAAG,aACJ,yBAAKG,UAAU,QACX,yBAAKH,GAAG,aACJ,8BAAOL,IAEX,0BAAMS,IAAKhB,KAAKL,MAAMC,UAAX,MAA+BgB,GAAG,QAAQZ,KAAKL,MAAMC,UAAX,QAEzD,yBAAKgB,GAAG,UACJ,8BAAOZ,KAAKL,MAAMC,UAAX,SAEX,yBAAKgB,GAAG,kBACJ,yBAAKK,MAAM,gBACP,uBAAGC,KAAK,2BAA2BN,GAAG,cAAcC,MAAO,CAAChB,MAAOG,KAAKL,MAAME,QAASa,IAE3F,4BAAQE,GAAG,YAAYO,QAASnB,KAAKF,cAArC,oB,GA3CDsB,IAAMC,WCF7BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aafe6435.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport quotes from '../../quotes';\r\nimport './QuoteBox.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst allQuotes = quotes.quotes;\r\nconst randomMC = require('random-material-color');\r\n\r\nclass QuoteBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currQuote: {},\r\n            color: \"\"\r\n        }\r\n        this.refreshQuote = this.refreshQuote.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshQuote();\r\n    }\r\n\r\n    refreshQuote() {\r\n        this.setState(({\r\n            currQuote: allQuotes[Math.ceil(Math.random() * allQuotes.length) - 1],\r\n            color: randomMC.getColor(),\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const quoteIcon = <FontAwesomeIcon icon={faQuoteLeft} />\r\n        const twitterIcon = <FontAwesomeIcon icon={faTwitterSquare} />\r\n        return (\r\n            <div id=\"env\" style={{\r\n                backgroundColor: this.state.color,\r\n                color: this.state.color\r\n            }}>\r\n                <div id=\"quote-box\">\r\n                    <div className=\"text\">\r\n                        <div id=\"quoteIcon\">\r\n                            <span>{quoteIcon}</span>\r\n                        </div>\r\n                        <span key={this.state.currQuote[\"quote\"]} id=\"text\">{this.state.currQuote[\"quote\"]}</span>\r\n                    </div>\r\n                    <div id=\"author\">\r\n                        <span>{this.state.currQuote[\"author\"]}</span>\r\n                    </div>\r\n                    <div id=\"button-section\">\r\n                        <div class=\"socialButton\">\r\n                            <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\" style={{color: this.state.color}}>{twitterIcon}</a>\r\n                        </div>\r\n                        <button id=\"new-quote\" onClick={this.refreshQuote}>New quote</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuoteBox;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport QuoteBox from './components/quote_box/QuoteBox'\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuoteBox />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}